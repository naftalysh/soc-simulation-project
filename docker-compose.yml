version: '3.8'

services:
  # SoC Hardware Emulator (QEMU)
  soc-emulator:
    build:
      context: ./soc-emulator
      dockerfile: Dockerfile
    privileged: true
    ports:
      - "${SOC_EMULATOR_PORT}:9100"  # Prometheus metrics exporter
      - "5022:22"  # SSH access to the emulator
    networks:
      soc-net:
        aliases:
          - "soc-emulator"
    volumes:
      - ./soc-emulator/benchmarks:/benchmarks
    depends_on:
      - api-backend
    environment:
      API_BACKEND_URL: "${API_BACKEND_URL}"

  # API Backend
  api-backend:
    build:
      context: ./api-backend
      dockerfile: Dockerfile
    ports:
      - "${API_BACKEND_PORT}:5000"
    networks:
      soc-net:
        aliases:
          - "api-backend"
    depends_on:
      - postgres
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_HOST: "postgres"
      POSTGRES_PORT: "${POSTGRES_PORT}"

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "${PROMETHEUS_PORT}:9090"
    networks:
      soc-net:
        aliases:
          - "prometheus"

  # Grafana for Data Visualization
  grafana:
    image: grafana/grafana:latest
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_ADMIN_PASSWORD}"
      GF_SERVER_HTTP_PORT: 3000
    ports:
      - "${GRAFANA_PORT}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      soc-net:
        aliases:
          - "grafana"
    depends_on:
      - prometheus
      - postgres

  # PostgreSQL for Data Storage
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      soc-net:
        aliases:
          - "postgres"

  # PrestoSQL for Distributed Querying
  prestosql:
    image: trinodb/trino:latest
    ports:
      - "${PRESTO_PORT}:8080"
    networks:
      soc-net:
        aliases:
          - "prestosql"
    depends_on:
      - postgres

  # Apache Spark
  spark-master:
    image: bitnami/spark:latest
    environment:
      SPARK_MODE: "master"
      SPARK_MASTER_WEBUI_PORT: "${SPARK_MASTER_WEBUI_PORT}"
    ports:
      - "7077:7077"
      - "${SPARK_MASTER_WEBUI_PORT}:8080"
    networks:
      soc-net:
        aliases:
          - "spark-master"

  spark-worker:
    image: bitnami/spark:latest
    environment:
      SPARK_MODE: "worker"
      SPARK_MASTER_URL: "spark://spark-master:7077"
      SPARK_WORKER_WEBUI_PORT: "${SPARK_WORKER_WEBUI_PORT}"
    depends_on:
      - spark-master
    ports:
      - "${SPARK_WORKER_WEBUI_PORT}:8081"
    networks:
      soc-net:
        aliases:
          - "spark-worker"

  # Spark Application
  spark-app:
    build:
      context: ./spark-app
      dockerfile: Dockerfile
    depends_on:
      - spark-master
      - spark-worker
      - postgres
    networks:
      soc-net:
        aliases:
          - "spark-app"
    environment:
      SPARK_MASTER_URL: "spark://spark-master:7077"
    entrypoint: ["/app/entrypoint.sh"]

  # Performance Testing Tool (Locust)
  locust:
    image: locustio/locust
    volumes:
      - ./locustfile.py:/locustfile.py
    command: -f /locustfile.py --host=http://api-backend:5000
    ports:
      - "${LOCUST_PORT}:8089"
    depends_on:
      - api-backend
    networks:
      soc-net:
        aliases:
          - "locust"

networks:
  soc-net:

volumes:
  postgres_data:
  grafana_data:
