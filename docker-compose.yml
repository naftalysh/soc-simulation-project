version: '3.8'

services:
  # SoC Hardware Emulator (QEMU)
  soc-emulator:
    build:
      context: ./soc-emulator
      dockerfile: Dockerfile
    privileged: true
    ports:
      - "5555:5555"
      - "9100:9100"  # Prometheus metrics exporter
    networks:
      soc-net:
        aliases:
          - "soc-emulator"
    volumes:
      - ./soc-emulator/benchmarks:/benchmarks
    depends_on:
      - postgres
      - api-backend
    environment:
      PROMETHEUS_PORT: "9100"
      # Set API_BACKEND_URL environment variable if needed
      # Since the emulated SoC accesses 'http://10.0.2.2:5000' by default, this may not be necessary
      # But if you need to override it, uncomment the line below
      API_BACKEND_URL: "${API_BACKEND_URL}"

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      soc-net:
        aliases:
          - "prometheus"

  # Grafana for Data Visualization
  grafana:
    image: grafana/grafana:latest
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_ADMIN_PASSWORD}"
      GF_DATASOURCE_POSTGRESQL_USER: "${POSTGRES_USER}"
      GF_DATASOURCE_POSTGRESQL_PASSWORD: "${POSTGRES_PASSWORD}"
      GF_DATASOURCE_POSTGRESQL_DB: "${POSTGRES_DB}"
      GF_PATHS_PROVISIONING: "/etc/grafana/provisioning"
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      soc-net:
        aliases:
          - "grafana"
    depends_on:
      - prometheus

  # PostgreSQL for Data Storage
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      soc-net:
        aliases:
          - "postgres"


  # PrestoSQL for Distributed Querying
  prestosql:
    image: trinodb/trino:latest
    ports:
      - "8080:8080"
    networks:
      soc-net:
        aliases:
          - "prestosql"

    depends_on:
      - postgres

  # Apache Spark
  spark-master:
    image: bitnami/spark:latest
    environment:
      SPARK_MODE: "master"
    ports:
      - "7077:7077"
      - "8081:8080"
    networks:
      - soc-net

  spark-worker:
    image: bitnami/spark:latest
    environment:
      SPARK_MODE: "worker"
      SPARK_MASTER_URL: "spark://spark-master:7077"
    depends_on:
      - spark-master
    networks:
      - soc-net

  # Spark Application
  # spark-app:
  #   build:
  #     context: ./spark-app
  #     dockerfile: Dockerfile
  #   depends_on:
  #     - spark-master
  #     - spark-worker
  #     - postgres
  #   networks:
  #     - soc-net
  #   environment:
  #     SPARK_MASTER_URL: "spark://spark-master:7077"
  # Remove the 'command' section to use the default entrypoint behavior

  spark-app:
    build:
      context: ./spark-app
      dockerfile: Dockerfile
    depends_on:
      - spark-master
      - spark-worker
      - postgres
    networks:
      soc-net:
        aliases:
          - "spark-app"
    environment:
      SPARK_MASTER_URL: "spark://spark-master:7077"
    entrypoint: ["/app/entrypoint.sh"]


  # spark-app:
  #   build:
  #     context: ./spark-app
  #     dockerfile: Dockerfile
  #   depends_on:
  #     - spark-master
  #     - spark-worker
  #     - postgres
  #   networks:
  #     - soc-net
  #   environment:
  #     SPARK_MASTER_URL: "spark://spark-master:7077"
  #   command:
  #     - "/opt/bitnami/spark/bin/spark-submit"
  #     - "--master"
  #     - "spark://spark-master:7077"
  #     - "--packages"
  #     - "org.postgresql:postgresql:42.2.24"
  #     - "/app/data_analysis.py"


  # API Backend
  api-backend:
    build:
      context: ./api-backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    networks:
      soc-net:
        aliases:
          - "api-backend"
    depends_on:
      - postgres

  # Performance Testing Tool (Locust)
  locust:
    image: locustio/locust
    volumes:
      - ./locustfile.py:/locustfile.py
    command: locust -f /locustfile.py --host=http://soc-emulator:8000
    ports:
      - "8089:8089"
    depends_on:
      - soc-emulator
    networks:
      soc-net:
        aliases:
          - "locust"


networks:
  soc-net:

volumes:
  postgres_data:
  grafana_data:
